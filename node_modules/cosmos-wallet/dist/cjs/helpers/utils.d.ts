import { Coin, StdSignDoc } from '@cosmjs/amino';
import { AccountData } from '@cosmjs/proto-signing';
import { SignDoc } from '@cosmjs/proto-signing/build/codec/cosmos/tx/v1beta1/tx';
export declare function getCosmosAddressPrefix(chainId?: string): string;
export declare function getCosmosAddress(publicKey: Uint8Array, chainId?: string): string;
export declare function getAddressFromPublicKey(publicKey: Uint8Array, prefix?: string): string;
export declare function getPublicKey(privkey: Uint8Array): Promise<Uint8Array>;
export declare function stringifySignDocValues(signDoc: any): any;
export declare function parseSignDocValues(signDoc: any): any;
export declare function formatDirectSignDoc(fee: Coin[], pubkey: string, gasLimit: number, accountNumber: number, sequence: number, bodyBytes: string, chainId: string): SignDoc;
export declare function stringifyAccountDataValues(account: AccountData): {
    pubkey: string;
    address: string;
    algo: import("@cosmjs/proto-signing").Algo;
};
export declare function parseAccountDataValues(account: any): any;
export declare function recoverSigningAddress(signature: string, hash: Uint8Array, recoveryIndex: number): Promise<string | null>;
export declare function verifySignature(address: string, signature: string, hash: Uint8Array): Promise<boolean>;
export declare const verifyDirectSignature: (address: string, signature: string, signDoc: SignDoc) => Promise<boolean>;
export declare const verifyAminoSignature: (address: string, signature: string, signDoc: StdSignDoc) => Promise<boolean>;
//# sourceMappingURL=utils.d.ts.map